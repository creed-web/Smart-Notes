#!/usr/bin/env python3
"""
Test Enhanced Export System
This script tests the new multi-format export capabilities
"""

import os
import sys
import json
from pathlib import Path

# Add backend to path
backend_path = Path(__file__).parent / "backend"
sys.path.insert(0, str(backend_path))

def test_export_system():
    """Test the enhanced export system"""
    print("üöÄ Testing Enhanced Export System")
    print("=" * 50)
    
    try:
        # Import the export system
        from export_system import ExportSystem
        
        # Create export system instance
        export_system = ExportSystem()
        print("‚úÖ Export system instantiated successfully")
        
        # Test sample content and page info
        test_notes = """# Machine Learning Overview

## Key Concepts

### Supervised Learning
üîë **Key point**: Uses labeled data to train models
- Decision trees for classification
- Linear regression for prediction
- **Neural networks** for complex patterns

### Unsupervised Learning
- Clustering techniques like K-means
- Dimensionality reduction with PCA
- ‚ú® **Benefit**: Discovers hidden patterns in data

### Deep Learning
‚ö†Ô∏è **Important**: Requires large datasets
- Convolutional Neural Networks (CNNs)
- Recurrent Neural Networks (RNNs)
- **Transformer architectures**

## Applications
‚úÖ **Action items** for implementation:
- Computer vision systems
- Natural language processing
- Autonomous vehicles
- Medical diagnosis

## Summary
Machine learning revolutionizes how we process data and make predictions, with applications spanning multiple industries.

---
*Generated by Smart Notes AI*"""
        
        page_info = {
            'title': 'Machine Learning Guide',
            'url': 'https://example.com/ml-guide',
            'timestamp': '2024-01-01T00:00:00Z'
        }
        
        print(f"\nüîç Testing {len(export_system.supported_formats)} export formats...")
        
        # Test each export format
        test_results = {}
        
        for export_format in export_system.supported_formats:
            try:
                print(f"\nüì§ Testing {export_format} export...")
                
                result = export_system.export_notes(test_notes, page_info, export_format)
                
                if result.get('success'):
                    if 'data' in result:
                        # File export
                        file_size = result.get('size', len(result.get('data', b'')))
                        print(f"‚úÖ {export_format.upper()}: {result.get('filename')} ({file_size} bytes)")
                        test_results[export_format] = {'success': True, 'type': 'file', 'size': file_size}
                        
                        # Save sample files for inspection (first few formats)
                        if export_format in ['markdown', 'html', 'txt', 'json'] and isinstance(result.get('data'), bytes):
                            sample_file = Path(f"sample_export.{export_format}")
                            with open(sample_file, 'wb') as f:
                                f.write(result['data'])
                            print(f"   üìÅ Sample saved as {sample_file}")
                            
                    else:
                        # Service export (like Notion, Google Slides)
                        print(f"‚úÖ {export_format.upper()}: Service integration ready")
                        test_results[export_format] = {'success': True, 'type': 'service'}
                        
                        if result.get('setup_required'):
                            print(f"   ‚ö†Ô∏è  Requires setup: {result.get('setup_instructions', 'API configuration needed')}")
                            
                else:
                    print(f"‚ùå {export_format.upper()}: {result.get('error', 'Unknown error')}")
                    test_results[export_format] = {'success': False, 'error': result.get('error')}
                    
                    if result.get('setup_required'):
                        print(f"   ‚ÑπÔ∏è  Setup required: {result.get('setup_instructions', 'API configuration needed')}")
                        test_results[export_format]['setup_required'] = True
                        
            except Exception as e:
                print(f"‚ùå {export_format.upper()}: Exception - {str(e)}")
                test_results[export_format] = {'success': False, 'error': str(e)}
        
        # Test format metadata
        print(f"\nüìã Testing format metadata...")
        try:
            formats_info = export_system.get_supported_formats()
            print(f"‚úÖ Retrieved metadata for {len(formats_info)} formats")
            
            for format_info in formats_info[:3]:  # Show first 3 as example
                print(f"   {format_info['icon']} {format_info['name']}: {format_info['description']}")
                
        except Exception as e:
            print(f"‚ùå Format metadata test failed: {e}")
        
        print("\n" + "=" * 50)
        print("üéâ EXPORT SYSTEM TEST COMPLETE")
        print("=" * 50)
        
        # Summary
        successful_exports = sum(1 for result in test_results.values() if result['success'])
        total_exports = len(test_results)
        setup_required = sum(1 for result in test_results.values() if result.get('setup_required'))
        
        print(f"\nüìä Test Results: {successful_exports}/{total_exports} formats working")
        print(f"üìã Breakdown:")
        
        file_exports = [fmt for fmt, result in test_results.items() if result.get('type') == 'file' and result['success']]
        service_exports = [fmt for fmt, result in test_results.items() if result.get('type') == 'service' and result['success']]
        failed_exports = [fmt for fmt, result in test_results.items() if not result['success'] and not result.get('setup_required')]
        
        print(f"  ‚úÖ File exports ({len(file_exports)}): {', '.join(file_exports)}")
        print(f"  üîó Service integrations ({len(service_exports)}): {', '.join(service_exports)}")
        if setup_required > 0:
            print(f"  ‚öôÔ∏è  Requires setup ({setup_required}): {', '.join([fmt for fmt, result in test_results.items() if result.get('setup_required')])}")
        if failed_exports:
            print(f"  ‚ùå Failed ({len(failed_exports)}): {', '.join(failed_exports)}")
        
        if successful_exports >= total_exports * 0.7:  # 70% success rate
            print("\nüéâ EXPORT SYSTEM IS READY!")
            print("üöÄ Available export options:")
            print("  ‚Ä¢ PDF with enhanced formatting")
            print("  ‚Ä¢ Markdown with frontmatter")
            print("  ‚Ä¢ HTML with professional styling")
            print("  ‚Ä¢ JSON with structured data")
            print("  ‚Ä¢ Plain text with metadata")
            print("  ‚Ä¢ Obsidian-compatible markdown")
            print("  ‚Ä¢ OneNote HTML format")
            print("  ‚Ä¢ Evernote ENEX format")
            print("  ‚Ä¢ Notion integration (with API setup)")
            print("  ‚Ä¢ Google Slides integration (with API setup)")
        else:
            print("\n‚ö†Ô∏è  Some export formats need attention.")
            print("   Check the failed tests above and ensure:")
            print("   ‚Ä¢ All dependencies are installed")
            print("   ‚Ä¢ Backend server can start properly")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Failed to import export system: {e}")
        print("üí° Make sure you're running from the smart-notes-system directory")
        return False
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        return False

def show_export_usage():
    """Show instructions for using the export system"""
    print("\n" + "=" * 50)
    print("üìñ HOW TO USE THE EXPORT SYSTEM")
    print("=" * 50)
    
    print("\n1. üåê From Chrome Extension:")
    print("   ‚Ä¢ Generate structured notes")
    print("   ‚Ä¢ Click 'Export ‚ñº' button")
    print("   ‚Ä¢ Choose from 10+ export formats")
    print("   ‚Ä¢ Files download automatically")
    
    print("\n2. üìÑ File Export Options:")
    print("   ‚Ä¢ PDF: Professional formatted document")
    print("   ‚Ä¢ Markdown: Universal format with frontmatter")
    print("   ‚Ä¢ HTML: Styled web page")
    print("   ‚Ä¢ JSON: Structured data with metadata")
    print("   ‚Ä¢ TXT: Plain text with headers")
    
    print("\n3. üöÄ Platform Export Options:")
    print("   ‚Ä¢ Obsidian: Enhanced markdown with backlinks")
    print("   ‚Ä¢ OneNote: HTML format for direct import")
    print("   ‚Ä¢ Evernote: ENEX format for import")
    print("   ‚Ä¢ Notion: Direct API integration (setup required)")
    print("   ‚Ä¢ Google Slides: Presentation format (setup required)")
    
    print("\n4. ‚öôÔ∏è API Setup (Optional):")
    print("   For Notion:")
    print("     export NOTION_API_TOKEN='your_token_here'")
    print("   For Google Slides:")
    print("     export GOOGLE_CREDENTIALS_JSON='credentials.json'")
    
    print("\n5. üé® What's Enhanced:")
    print("   ‚Ä¢ Multiple format support in one system")
    print("   ‚Ä¢ Proper formatting preservation")
    print("   ‚Ä¢ Platform-specific optimizations")
    print("   ‚Ä¢ Metadata and frontmatter inclusion")
    print("   ‚Ä¢ Professional styling and layouts")

if __name__ == "__main__":
    print("üß™ Export System Test")
    print("Testing the new multi-format export capabilities\n")
    
    success = test_export_system()
    
    if success:
        show_export_usage()
    
    print(f"\n{'‚úÖ Export system test completed successfully!' if success else '‚ùå Export system test failed - check errors above'}")
